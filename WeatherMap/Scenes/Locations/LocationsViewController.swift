//
//  LocationsViewController.swift
//  WeatherMap
//
//  Created by Kamil Chmiel on 18.10.2018.
//  Copyright (c) 2018 kamilchmiel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol LocationsDisplayLogic: class
{
  func displayFetchLocations(viewModel: Locations.FetchLocations.ViewModel)
}

class LocationsViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, LocationsDisplayLogic
{
    @IBOutlet weak var tableView: UITableView!
    var interactor: LocationsBusinessLogic?
  var router: (NSObjectProtocol & LocationsRoutingLogic & LocationsDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = LocationsInteractor()
    let presenter = LocationsPresenter()
    let router = LocationsRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    tableView.delegate = self
    tableView.dataSource = self
    fetchLocations()
  }
  
  // MARK: Fetch locations
  
    var displayedLocations = [Locations.FetchLocations.ViewModel.DisplayedLocation]()
    
    func fetchLocations()
    {
        let request = Locations.FetchLocations.Request()
        interactor?.fetchLocations(request: request)
    }
  
    func displayFetchLocations(viewModel: Locations.FetchLocations.ViewModel)
    {
        displayedLocations = viewModel.displayedLocations
        tableView.reloadData()
    }
    
    // MARK: tableView setting

    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedLocations.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let locationCell: UITableViewCell = tableView.dequeueReusableCell(withIdentifier: "cell") as UITableViewCell!
        locationCell.textLabel?.text = displayedLocations[indexPath.row].name
        
        return locationCell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let mapVC = tabBarController?.viewControllers![0] as? MapViewController {
            let chosenLocation = displayedLocations[indexPath.row]
            mapVC.changeLocation(lon: chosenLocation.longitude, lat: chosenLocation.latitude)
            tabBarController?.selectedIndex = 0
        }
    }
}
