//
//  MapViewController.swift
//  WeatherMap
//
//  Created by Kamil Chmiel on 18.10.2018.
//  Copyright (c) 2018 kamilchmiel. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit
import CoreLocation

protocol MapDisplayLogic: class
{
    func displayWeather(viewModel: Map.FetchWeather.ViewModel)
    func displayConnectionError()
}

class MapViewController: UIViewController, CLLocationManagerDelegate, MapDisplayLogic
{
    @IBOutlet weak var mapView: MKMapView!
    @IBOutlet weak var temperatureLabel: UILabel!
    @IBOutlet weak var cityLabel: UILabel!
    @IBOutlet weak var descriptionLabel: UILabel!
    var interactor: MapBusinessLogic?
    var router: (NSObjectProtocol & MapRoutingLogic & MapDataPassing)?
    var locationManager = CLLocationManager()

    // MARK: Object lifecycle
  
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
  
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        setup()
    }
  
    // MARK: Setup
  
    private func setup()
    {
        let viewController = self
        let interactor = MapInteractor()
        let presenter = MapPresenter()
        let router = MapRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
  
  // MARK: Routing
  
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
  
    // MARK: View lifecycle
  
    override func viewDidLoad()
    {
        super.viewDidLoad()
        setupLocationManager()
    }
    
    // MARK: Location
  
    func setupLocationManager() {
        mapView.showsUserLocation = true
        
        if CLLocationManager.locationServicesEnabled() == true {
            if CLLocationManager.authorizationStatus() == .restricted || CLLocationManager.authorizationStatus() == .denied || CLLocationManager.authorizationStatus() == .notDetermined {
                locationManager.requestWhenInUseAuthorization()
            }
            locationManager.delegate = self
            locationManager.desiredAccuracy = kCLLocationAccuracyHundredMeters
            locationManager.startUpdatingLocation()
            
        } else {
            let alert = UIAlertController(title: "Location access problem", message: "You have to turn on the location services to be able to get the weather", preferredStyle: UIAlertControllerStyle.alert)
            alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
            self.present(alert, animated: true, completion: nil)
        }
    }
    
    func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
        let location = locations[locations.count - 1]
        if location.horizontalAccuracy > 0 {
            locationManager.stopUpdatingLocation()
            locationManager.delegate = nil
            
            setLocationPin(location: location)
            fetchWeather(lon: Double(location.coordinate.longitude), lat: Double(location.coordinate.latitude), save: true)
        }
    }
    
    func changeLocation(lon: Double, lat: Double) {
        setLocationPin(location: CLLocation.init(latitude: CLLocationDegrees(lat), longitude: CLLocationDegrees(lon)))
        fetchWeather(lon: lon, lat: lat)
    }
    
    func setLocationPin(location: CLLocation) {
        let position = CLLocationCoordinate2D(latitude: location.coordinate.latitude, longitude: location.coordinate.longitude)
        
        let region = MKCoordinateRegion(center: position, span: MKCoordinateSpan(latitudeDelta: 0.5, longitudeDelta: 0.5))
        mapView.setRegion(region, animated: true)
        
        let annotation = MKPointAnnotation()
        annotation.coordinate = position
        mapView.addAnnotation(annotation)
    }
    
    func locationManager(_ manager: CLLocationManager, didFailWithError error: Error) {
        let alert = UIAlertController(title: "Location access problem", message: "There was a problem with getting coordinations.", preferredStyle: UIAlertControllerStyle.alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
    
    // MARK: Fetch weather
  
    func fetchWeather(lon: Double, lat: Double, save: Bool = false)
    {
        let request = Map.FetchWeather.Request(latitude: lat, longitude: lon, save: save)
        interactor?.fetchWeather(request: request)
    }
  
    func displayWeather(viewModel: Map.FetchWeather.ViewModel)
    {
        cityLabel.text = viewModel.city
        temperatureLabel.text = "\(viewModel.temperature) st"
        descriptionLabel.text = "Description: " + viewModel.desc
    }
    
    func displayConnectionError() {
        let alert = UIAlertController(title: "Connection problem", message: "There was a problem with internet connection.", preferredStyle: UIAlertControllerStyle.alert)
        alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
        self.present(alert, animated: true, completion: nil)
    }
}
